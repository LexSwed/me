---
import ChevronRight from "../icons/chevron-right.astro";
import Color from "color";

import { formatDate } from "../utils";
import { topicColor, type Topic } from "../content/config";
import { getFeed } from "../content";

const feed = await getFeed();

const postsWithColor = feed.map((post) => {
  const { tags, title, publishDate } = post.data;

  const topic = tags[0] as Topic;

  let color: Color;
  if (topicColor.has(topic)) {
    color = Color(topicColor.get(topic));
  } else {
    color = Color(`#232946`);
  }

  const pastel = color.mix(Color("white"), 0.2).hsl().saturate(-0.5);

  const createdAt = formatDate(publishDate);
  return {
    title,
    color: pastel,
    createdAt,
    topic,
    slug: post.slug,
  };
});
---

<section
  class="flex snap-x snap-mandatory scroll-px-8 gap-8 overflow-auto px-8 py-10"
  aria-labelledby="notes"
>
  <header
    class="flex max-w-[60%] shrink-0 snap-start flex-row items-center gap-2"
  >
    <div class="animate-appearSlideIn flex flex-col gap-6">
      <h2 id="notes" class="text-4xl">Feed</h2>
      <p class="text-lg sm:text-xl">Mostly web, but other things too.</p>
      <a
        href="/feed"
        class="ring-on-primary focus:outline-on-primary flex-inline -ms-2 rounded-sm p-2 leading-10 underline decoration-2 focus:outline-2"
        >See all</a
      >
    </div>
    <ChevronRight class="animate-arrow h-16" />
  </header>
  <ul class="contents">
    {
      postsWithColor.map(({ color, title, createdAt, topic, slug }, index) => {
        return (
          <li class="contents">
            <a
              href={`/feed/${slug}`}
              rel="prefetch"
              style={{
                "--bg-h": `${color.hue().toPrecision(2)}deg`,
                "--bg-s": `${color.saturationv().toPrecision(2)}%`,
                "--bg-l": `${color.lightness().toPrecision(2)}%`,
                "--index": index,
              }}
              class:list={[
                "card ring-on-primary isolate block shrink-0 snap-start snap-always rounded-2xl outline-hidden focus:ring-4",
                color.isDark() ? "text-on-background" : "text-on-primary",
              ]}
            >
              <div class="flex h-full flex-col justify-between p-8">
                <div class="self-start rounded-md bg-white/20 px-3 py-1 text-xs backdrop-blur-md">
                  {createdAt} in <b class="font-medium">{topic}</b>
                </div>
                <p class="xs:text-2xl text-xl">{title}</p>
              </div>
            </a>
          </li>
        );
      })
    }
  </ul>
  <footer class="h-full shrink-0 snap-end self-center">
    <a
      href="/feed"
      class="bg-on-background/10 text-background ring-on-primary hover:bg-on-background/20 focus:bg-on-background/20 flex h-full items-center gap-2 rounded-2xl p-8 text-xl outline-hidden transition-all duration-300 focus:ring-2"
      >All <ChevronRight aria-hidden="true" class="h-5" /></a
    >
  </footer>
</section>

<style>
  @property --bg-x {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
  @property --bg-y {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
  @property --bg-gradient-saturation {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
  .card {
    --bg-x: 90%;
    --bg-y: 20%;
    --bg-hsl: var(--bg-h) var(--bg-s) var(--bg-l);
    --bg: hsl(var(--bg-hsl) / 1);
    --bg-gradient-saturation: min(calc(var(--bg-s) + 20%), 100%);
    --bg-gradient: radial-gradient(
        circle at var(--bg-x) var(--bg-y),
        hsl(
            max(calc(var(--bg-h) - 20deg), 10deg) var(--bg-gradient-saturation)
              var(--bg-l)
          )
          30%,
        hsl(
          max(calc(var(--bg-h) - 10deg), 10deg) var(--bg-gradient-saturation)
            var(--bg-l) / 0%
        )
      ),
      radial-gradient(
        circle at 40% 90%,
        hsl(
          min(calc(var(--bg-h) + 20deg), 200deg) var(--bg-gradient-saturation)
            max(calc(var(--bg-l) - 5%), 10%)
        ),
        hsl(
          min(calc(var(--bg-h) + 10deg), 200deg) var(--bg-gradient-saturation)
            max(calc(var(--bg-l) - 10%), 10%) / 0%
        )
      );
    position: relative;
    inline-size: clamp(16rem, 20rem, 80vw);
    block-size: clamp(12rem, 40vh, 25rem);
    transition:
      --bg-x 0.5s,
      --bg-y 0.5s,
      --bg-gradient-saturation 1s;
    transform-style: preserve-3d;
    background: var(--bg-gradient), var(--bg);

    &:where(:focus, :hover) {
      --bg-x: 60%;
      --bg-y: 50%;
      --bg-gradient-saturation: var(--bg-s);
    }
  }

  .animate-arrow {
    --x: -0.5rem;
    animation: slideC 0.3s 0.1s ease-in both;
  }
</style>
